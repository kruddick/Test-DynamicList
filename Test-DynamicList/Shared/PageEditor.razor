@using Test_DynamicList.Data


<div class="text-center m-5">
    <h3>Page Editor</h3>
    <hr />
</div>


<div class="row mt-5">
    <div class="col-8">
        <ul class="list-group shadow bg-white rounded">
            <li class="list-group-item pageItem-bg-color">
                <div class="row">
                    <div class="col-1">
                    </div>
                    <div class="col-2 text-center pr-2">
                        <h5>Release</h5>
                    </div>
                    <div class="col-1 text-center">
                    </div>
                    <div class="col-3">
                        <h5>Data</h5>
                    </div>
                    <div class="col-1">
                        <h5>HasEdit</h5>
                    </div>
                    <div class="col-1">
                        <h5>Action</h5>
                    </div>
                    <div class="col-3">
                        <div class="row">
                            @if (State.GetUndoCount() > 0)
                            {
                                <div class="col-4">
                                </div>
                                <div class="col-4">
                                    <button class="btn btn-outline-danger btn-sm" @onclick="@(() => UndoChange())">Undo</button>
                                </div>
                                <div class="col-4">
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </li>

            @foreach (var item in PageItems)
            {
                var active = "list-group-item";
                @if (SelectedPageItem != null && item.LineOrder == SelectedPageItem.LineOrder)
                {
                    active = "list-group-item list-group-item-secondary";
                }

                <li class="@active">
                    <div class="row">
                        <div class="col-1" @onclick="@(() => RowSelected(item.LineOrder))">
                            >
                        </div>
                        <div class="col-2 text-center pr-2" @onclick="@(() => RowSelected(item.LineOrder))">
                            @item.Release
                        </div>
                        <div class="col-1 text-center" @onclick="@(() => RowSelected(item.LineOrder))">
                            @item.LineOrder
                        </div>
                        <div class="col-3" @onclick="@(() => RowSelected(item.LineOrder))">
                            @item.Data
                        </div>
                        <div class="col-1">
                            @item.HasEdit.ToString()
                        </div>
                        <div class="col-1">
                            @item.Action
                        </div>
                        <div class="col-3">
                            <div class="row">
                                <div class="col-4">
                                    @if (!item.HasEdit)
                                    {
                                        @if (item.Action != "delete")
                                        {
                                            <button class="btn btn-outline-success btn-sm" @onclick="@(() => CreateRow(item.LineOrder, "create"))">Create</button>
                                        }
                                    }
                                </div>
                                <div class="col-4">
                                    @if (!item.HasEdit)
                                    {
                                        @if (item.Action != "delete" && item.Action != "create")
                                        {
                                            <button class="btn btn-outline-primary btn-sm" @onclick="@(() => CreateRow(item.LineOrder, "update"))">Update</button>
                                        }
                                    }
                                </div>
                                <div class="col-4">
                                    @if (!item.HasEdit)
                                    {
                                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => CreateRow(item.LineOrder, "delete"))">Delete</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>

    @if (SelectedPageItem != null)
    {
        bool disable = false;
        if (String.IsNullOrEmpty(SelectedPageItem.Action))
        {
            disable = true;
        }

        <div class="col-4">
            <div class="jumbotron jumbotron-fluid p-5 shadow rounded grey-bg">
                @if (SelectedPageItem.Action != "delete")
                {
                    <h3 class="text-center mb-3">Editing Line @SelectedPageItem.LineOrder.ToString()</h3>
                    <div class="container">
                        <div>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Line Order</span>
                                </div>
                                <input type="text" value="@SelectedPageItem.LineOrder" class="form-control" disabled />
                            </div>

                        </div>
                        <div>
                            @if (SelectedPageItem.Action == "create" || SelectedPageItem.Action == "update")
                            {
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Data</span>
                                    </div>
                                    <input type="text" @bind-value="SelectedPageItem.Data" class="form-control" />
                                </div>
                            }
                            else
                            {
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Data</span>
                                    </div>
                                    <input type="text" value="@SelectedPageItem.Data" class="form-control" disabled />
                                </div>
                            }
                        </div>
                        <div>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Has Edit:</span>
                                </div>
                                <input type="text" class="form-control" value="@SelectedPageItem.HasEdit.ToString()" disabled>
                            </div>
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <div class="form-control">
                                    <input type="checkbox" checked disabled="@disable">
                                </div>
                            </div>
                            <input type="text" class="form-control" value="TDA" disabled>
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <div class="form-control">
                                    <input type="checkbox" disabled="@disable">
                                </div>
                            </div>
                            <input type="text" class="form-control" value="Pershing" disabled>
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <div class="form-control">
                                    <input type="checkbox" checked disabled="@disable">
                                </div>
                            </div>
                            <input type="text" class="form-control" value="GNW" disabled>
                        </div>
                    </div>
                    @if (!disable)
                    {
                        <div class="container d-flex justify-content-center">
                            <button class="btn btn-outline-danger btn-sm m-2">Update</button>
                            <button class="btn btn-outline-danger btn-sm m-2" @onclick="@(() => UndoEdit())">Undo</button>
                        </div>
                    }
                }
                else
                {
                    <h3 class="text-center">Nothing to edit on delete.</h3>
                }
            </div>
        </div>
    }
</div>




@code {

    [CascadingParameter]
    private StateComponent State { get; set; }


    [Parameter]
    public PageSelection PageSelection { get; set; }

    private PageItem SelectedPageItem;

    private List<PageItem> PageItems = new List<PageItem>();

    private PageItem Backup = new PageItem();

    protected override void OnInitialized()
    {
        PageItems = State.GetPageItems();
    }

    public void CreateRow(int lineId, string action)
    {
        var actionItem = PageItems.Where(x => x.LineOrder == lineId).FirstOrDefault();

        if (action == "delete" && actionItem.Release != null && actionItem.Release != "")
        {
            PageItems = State.RemoveAction(lineId);
            SelectedPageItem = null;
        }
        else
        {
            PageItems = State.AddAction(lineId, action, PageSelection.Release).OrderBy(x => x.LineOrder).ToList();
            var selectedLine = lineId + 1;
            SelectedPageItem = PageItems.Where(x => x.LineOrder == selectedLine).FirstOrDefault();
            Backup = (PageItem)Extensions.DeepClone(SelectedPageItem);
        }
    }

    public void RowSelected(int lineId)
    {
        SelectedPageItem = PageItems.Where(x => x.LineOrder == lineId).FirstOrDefault();
        if (!String.IsNullOrEmpty(SelectedPageItem.Action))
        {
            Backup = (PageItem)Extensions.DeepClone(SelectedPageItem);
        }
    }

    public void UndoChange()
    {
        PageItems = State.UndoChange();
        SelectedPageItem = null;
    }

    public void UndoEdit()
    {
        var index = PageItems.FindIndex(x => x.LineOrder == SelectedPageItem.LineOrder);
        PageItems[index] = (PageItem)Extensions.DeepClone(Backup);
        SelectedPageItem = PageItems[index];
    }
}
